//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root'
})
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param page (optional)
   * @param pageSize (optional)
   * @return OK
   */
  getLeaderboard(page: number | undefined, pageSize: number | undefined): Observable<PaginatedLeaderboardResponse> {
    let url_ = this.baseUrl + "/api/Score/GetLeaderboard?";
    if (page === null)
      throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetLeaderboard(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetLeaderboard(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PaginatedLeaderboardResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PaginatedLeaderboardResponse>;
    }));
  }

  protected processGetLeaderboard(response: HttpResponseBase): Observable<PaginatedLeaderboardResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PaginatedLeaderboardResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getScoreById(publicIdentifier: string): Observable<GetHighScoreResponse> {
    let url_ = this.baseUrl + "/api/Score/GetScoreById/{publicIdentifier}";
    if (publicIdentifier === undefined || publicIdentifier === null)
      throw new Error("The parameter 'publicIdentifier' must be defined.");
    url_ = url_.replace("{publicIdentifier}", encodeURIComponent("" + publicIdentifier));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetScoreById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetScoreById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GetHighScoreResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GetHighScoreResponse>;
    }));
  }

  protected processGetScoreById(response: HttpResponseBase): Observable<GetHighScoreResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetHighScoreResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  createScore(body: number | undefined): Observable<CreateScoreResponse> {
    let url_ = this.baseUrl + "/api/Score/CreateScore";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateScore(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateScore(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CreateScoreResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CreateScoreResponse>;
    }));
  }

  protected processCreateScore(response: HttpResponseBase): Observable<CreateScoreResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CreateScoreResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  deleteScore(publicIdentifier: string): Observable<void> {
    let url_ = this.baseUrl + "/api/Score/DeleteScore/{publicIdentifier}";
    if (publicIdentifier === undefined || publicIdentifier === null)
      throw new Error("The parameter 'publicIdentifier' must be defined.");
    url_ = url_.replace("{publicIdentifier}", encodeURIComponent("" + publicIdentifier));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteScore(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteScore(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteScore(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  createOrGetUser(body: CreateUserRequest | undefined): Observable<CreateUserResponse> {
    let url_ = this.baseUrl + "/api/User/CreateOrGetUser";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processCreateOrGetUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processCreateOrGetUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<CreateUserResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<CreateUserResponse>;
    }));
  }

  protected processCreateOrGetUser(response: HttpResponseBase): Observable<CreateUserResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CreateUserResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  updateUser(body: UpdateUserRequest | undefined): Observable<UserDetailsResponse> {
    let url_ = this.baseUrl + "/api/User/UpdateUser";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUpdateUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<UserDetailsResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<UserDetailsResponse>;
    }));
  }

  protected processUpdateUser(response: HttpResponseBase): Observable<UserDetailsResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserDetailsResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  deleteUser(id: string): Observable<void> {
    let url_ = this.baseUrl + "/api/User/DeleteUser/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processDeleteUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDeleteUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDeleteUser(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getUserById(id: string): Observable<UserDetailsResponse> {
    let url_ = this.baseUrl + "/api/User/GetUserById/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetUserById(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetUserById(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<UserDetailsResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<UserDetailsResponse>;
    }));
  }

  protected processGetUserById(response: HttpResponseBase): Observable<UserDetailsResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserDetailsResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class CreateScoreResponse implements ICreateScoreResponse {
  score?: number;
  rank?: string | undefined;

  constructor(data?: ICreateScoreResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.score = _data["score"];
      this.rank = _data["rank"];
    }
  }

  static fromJS(data: any): CreateScoreResponse {
    data = typeof data === 'object' ? data : {};
    let result = new CreateScoreResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["score"] = this.score;
    data["rank"] = this.rank;
    return data;
  }
}

export interface ICreateScoreResponse {
  score?: number;
  rank?: string | undefined;
}

export class CreateUserRequest implements ICreateUserRequest {
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  isDeleted?: boolean;
  isActive?: boolean;

  constructor(data?: ICreateUserRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.emailId = _data["emailId"];
      this.profilePictureUrl = _data["profilePictureUrl"];
      this.isDeleted = _data["isDeleted"];
      this.isActive = _data["isActive"];
    }
  }

  static fromJS(data: any): CreateUserRequest {
    data = typeof data === 'object' ? data : {};
    let result = new CreateUserRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["emailId"] = this.emailId;
    data["profilePictureUrl"] = this.profilePictureUrl;
    data["isDeleted"] = this.isDeleted;
    data["isActive"] = this.isActive;
    return data;
  }
}

export interface ICreateUserRequest {
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  isDeleted?: boolean;
  isActive?: boolean;
}

export class CreateUserResponse implements ICreateUserResponse {
  publicIdentifier?: string;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  message?: string | undefined;

  constructor(data?: ICreateUserResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.publicIdentifier = _data["publicIdentifier"];
      this.name = _data["name"];
      this.emailId = _data["emailId"];
      this.profilePictureUrl = _data["profilePictureUrl"];
      this.message = _data["message"];
    }
  }

  static fromJS(data: any): CreateUserResponse {
    data = typeof data === 'object' ? data : {};
    let result = new CreateUserResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["publicIdentifier"] = this.publicIdentifier;
    data["name"] = this.name;
    data["emailId"] = this.emailId;
    data["profilePictureUrl"] = this.profilePictureUrl;
    data["message"] = this.message;
    return data;
  }
}

export interface ICreateUserResponse {
  publicIdentifier?: string;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  message?: string | undefined;
}

export class GetHighScoreResponse implements IGetHighScoreResponse {
  publicIdentifier?: string;
  score?: number;
  dateAchieved?: Date;
  scoredBy?: User;

  constructor(data?: IGetHighScoreResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.publicIdentifier = _data["publicIdentifier"];
      this.score = _data["score"];
      this.dateAchieved = _data["dateAchieved"] ? new Date(_data["dateAchieved"].toString()) : <any>undefined;
      this.scoredBy = _data["scoredBy"] ? User.fromJS(_data["scoredBy"]) : <any>undefined;
    }
  }

  static fromJS(data: any): GetHighScoreResponse {
    data = typeof data === 'object' ? data : {};
    let result = new GetHighScoreResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["publicIdentifier"] = this.publicIdentifier;
    data["score"] = this.score;
    data["dateAchieved"] = this.dateAchieved ? this.dateAchieved.toISOString() : <any>undefined;
    data["scoredBy"] = this.scoredBy ? this.scoredBy.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetHighScoreResponse {
  publicIdentifier?: string;
  score?: number;
  dateAchieved?: Date;
  scoredBy?: User;
}

export class LeaderboardItemResponse implements ILeaderboardItemResponse {
  publicIdentifier?: string;
  score?: number;
  dateAchieved?: Date;
  name?: string | undefined;
  profilePicUrl?: string | undefined;
  rank?: string | undefined;

  constructor(data?: ILeaderboardItemResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.publicIdentifier = _data["publicIdentifier"];
      this.score = _data["score"];
      this.dateAchieved = _data["dateAchieved"] ? new Date(_data["dateAchieved"].toString()) : <any>undefined;
      this.name = _data["name"];
      this.profilePicUrl = _data["profilePicUrl"];
      this.rank = _data["rank"];
    }
  }

  static fromJS(data: any): LeaderboardItemResponse {
    data = typeof data === 'object' ? data : {};
    let result = new LeaderboardItemResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["publicIdentifier"] = this.publicIdentifier;
    data["score"] = this.score;
    data["dateAchieved"] = this.dateAchieved ? this.dateAchieved.toISOString() : <any>undefined;
    data["name"] = this.name;
    data["profilePicUrl"] = this.profilePicUrl;
    data["rank"] = this.rank;
    return data;
  }
}

export interface ILeaderboardItemResponse {
  publicIdentifier?: string;
  score?: number;
  dateAchieved?: Date;
  name?: string | undefined;
  profilePicUrl?: string | undefined;
  rank?: string | undefined;
}

export class PaginatedLeaderboardResponse implements IPaginatedLeaderboardResponse {
  totalPages?: number;
  currentPage?: number;
  leaderboard?: LeaderboardItemResponse[] | undefined;

  constructor(data?: IPaginatedLeaderboardResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalPages = _data["totalPages"];
      this.currentPage = _data["currentPage"];
      if (Array.isArray(_data["leaderboard"])) {
        this.leaderboard = [] as any;
        for (let item of _data["leaderboard"])
          this.leaderboard!.push(LeaderboardItemResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PaginatedLeaderboardResponse {
    data = typeof data === 'object' ? data : {};
    let result = new PaginatedLeaderboardResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["totalPages"] = this.totalPages;
    data["currentPage"] = this.currentPage;
    if (Array.isArray(this.leaderboard)) {
      data["leaderboard"] = [];
      for (let item of this.leaderboard)
        data["leaderboard"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPaginatedLeaderboardResponse {
  totalPages?: number;
  currentPage?: number;
  leaderboard?: LeaderboardItemResponse[] | undefined;
}

export class UpdateUserRequest implements IUpdateUserRequest {
  publicIdentifier?: string;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;

  constructor(data?: IUpdateUserRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.publicIdentifier = _data["publicIdentifier"];
      this.name = _data["name"];
      this.emailId = _data["emailId"];
      this.profilePictureUrl = _data["profilePictureUrl"];
    }
  }

  static fromJS(data: any): UpdateUserRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateUserRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["publicIdentifier"] = this.publicIdentifier;
    data["name"] = this.name;
    data["emailId"] = this.emailId;
    data["profilePictureUrl"] = this.profilePictureUrl;
    return data;
  }
}

export interface IUpdateUserRequest {
  publicIdentifier?: string;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
}

export class User implements IUser {
  userId?: number;
  publicIdentifier?: string;
  auth0Identifier?: string | undefined;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  isDeleted?: boolean;
  isActive?: boolean;

  constructor(data?: IUser) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.publicIdentifier = _data["publicIdentifier"];
      this.auth0Identifier = _data["auth0Identifier"];
      this.name = _data["name"];
      this.emailId = _data["emailId"];
      this.profilePictureUrl = _data["profilePictureUrl"];
      this.isDeleted = _data["isDeleted"];
      this.isActive = _data["isActive"];
    }
  }

  static fromJS(data: any): User {
    data = typeof data === 'object' ? data : {};
    let result = new User();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["publicIdentifier"] = this.publicIdentifier;
    data["auth0Identifier"] = this.auth0Identifier;
    data["name"] = this.name;
    data["emailId"] = this.emailId;
    data["profilePictureUrl"] = this.profilePictureUrl;
    data["isDeleted"] = this.isDeleted;
    data["isActive"] = this.isActive;
    return data;
  }
}

export interface IUser {
  userId?: number;
  publicIdentifier?: string;
  auth0Identifier?: string | undefined;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  isDeleted?: boolean;
  isActive?: boolean;
}

export class UserDetailsResponse implements IUserDetailsResponse {
  publicIdentifier?: string;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  isDeleted?: boolean;
  isActive?: boolean;

  constructor(data?: IUserDetailsResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.publicIdentifier = _data["publicIdentifier"];
      this.name = _data["name"];
      this.emailId = _data["emailId"];
      this.profilePictureUrl = _data["profilePictureUrl"];
      this.isDeleted = _data["isDeleted"];
      this.isActive = _data["isActive"];
    }
  }

  static fromJS(data: any): UserDetailsResponse {
    data = typeof data === 'object' ? data : {};
    let result = new UserDetailsResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["publicIdentifier"] = this.publicIdentifier;
    data["name"] = this.name;
    data["emailId"] = this.emailId;
    data["profilePictureUrl"] = this.profilePictureUrl;
    data["isDeleted"] = this.isDeleted;
    data["isActive"] = this.isActive;
    return data;
  }
}

export interface IUserDetailsResponse {
  publicIdentifier?: string;
  name?: string | undefined;
  emailId?: string | undefined;
  profilePictureUrl?: string | undefined;
  isDeleted?: boolean;
  isActive?: boolean;
}

export class ApiException extends Error {
  override  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
